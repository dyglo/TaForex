/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_api_ai_ts";
exports.ids = ["_ssr_src_api_ai_ts"];
exports.modules = {

/***/ "?4c03":
/*!***********************!*\
  !*** debug (ignored) ***!
  \***********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(ssr)/./src/api/ai.ts":
/*!***********************!*\
  !*** ./src/api/ai.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchAISummary: () => (/* binding */ fetchAISummary)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n// xAI Grok-2-1212 API utility\n\nconst XAI_API_URL = \"https://api.x.ai/v1/chat/completions\" || 0;\nconst XAI_API_KEY = \"xai-yBdncPUttGbTXiXyAupLnCWXBz2Fuf3m4ZhAdaeyk6dOvyxLAMEZ573TO8peKeShHn3vGKX8hbTIfAfx\";\nasync function fetchAISummary(payload) {\n    if (!XAI_API_KEY) throw new Error(\"Missing xAI API key\");\n    // --- Token limit enforcement ---\n    const MAX_TOKENS = 131072;\n    // Rough estimate: 1 word â‰ˆ 1.3 tokens\n    function estimateTokens(text) {\n        return Math.ceil(text.split(/\\s+/).length * 1.3);\n    }\n    // Truncate trades and journals to fit within the token limit\n    let trades = payload.trades.slice();\n    let journalEntries = payload.journalEntries.slice();\n    let prompt = payload.prompt;\n    // Try most recent first\n    trades = trades.slice(-1000); // hard cap for performance\n    journalEntries = journalEntries.slice(-1000);\n    let userContent = \"\";\n    let tradeCount = trades.length;\n    let journalCount = journalEntries.length;\n    // Iteratively reduce until under limit\n    while(tradeCount >= 0){\n        while(journalCount >= 0){\n            userContent = [\n                prompt,\n                \"\",\n                \"Trades:\",\n                JSON.stringify(trades.slice(trades.length - tradeCount), null, 2),\n                \"\",\n                \"Journal Entries:\",\n                JSON.stringify(journalEntries.slice(journalEntries.length - journalCount), null, 2)\n            ].join(\"\\n\");\n            if (estimateTokens(userContent) < MAX_TOKENS) break;\n            journalCount -= 10;\n        }\n        if (estimateTokens(userContent) < MAX_TOKENS) break;\n        tradeCount -= 10;\n        journalCount = journalEntries.length;\n    }\n    // If still over, fallback to just prompt\n    if (estimateTokens(userContent) >= MAX_TOKENS) {\n        userContent = prompt;\n    }\n    try {\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(XAI_API_URL, {\n            model: \"grok-2-1212\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"You are an expert trading coach and analyst.\"\n                },\n                {\n                    role: \"user\",\n                    content: userContent\n                }\n            ],\n            temperature: 0.2\n        }, {\n            headers: {\n                \"Authorization\": `Bearer ${XAI_API_KEY}`,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        // OpenAI-compatible response structure\n        return {\n            summary: res.data.choices?.[0]?.message?.content || \"\"\n        };\n    } catch (err) {\n        // Add detailed error logging for debugging\n        if (err.response) {\n            throw new Error(`xAI API error: ${err.response.status} ${err.response.statusText} - ${JSON.stringify(err.response.data)}`);\n        }\n        throw new Error(\"Failed to connect to xAI API: \" + err.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvYXBpL2FpLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOEJBQThCO0FBQ0o7QUFFMUIsTUFBTUMsY0FBY0Msc0NBQW1DLElBQUk7QUFDM0QsTUFBTUcsY0FBY0gsc0ZBQW1DO0FBUWhELGVBQWVLLGVBQWVDLE9BQTJCO0lBQzlELElBQUksQ0FBQ0gsYUFBYSxNQUFNLElBQUlJLE1BQU07SUFFbEMsa0NBQWtDO0lBQ2xDLE1BQU1DLGFBQWE7SUFDbkIsc0NBQXNDO0lBQ3RDLFNBQVNDLGVBQWVDLElBQVk7UUFDbEMsT0FBT0MsS0FBS0MsSUFBSSxDQUFDRixLQUFLRyxLQUFLLENBQUMsT0FBT0MsTUFBTSxHQUFHO0lBQzlDO0lBQ0EsNkRBQTZEO0lBQzdELElBQUlDLFNBQVNULFFBQVFTLE1BQU0sQ0FBQ0MsS0FBSztJQUNqQyxJQUFJQyxpQkFBaUJYLFFBQVFXLGNBQWMsQ0FBQ0QsS0FBSztJQUNqRCxJQUFJRSxTQUFTWixRQUFRWSxNQUFNO0lBQzNCLHdCQUF3QjtJQUN4QkgsU0FBU0EsT0FBT0MsS0FBSyxDQUFDLENBQUMsT0FBTywyQkFBMkI7SUFDekRDLGlCQUFpQkEsZUFBZUQsS0FBSyxDQUFDLENBQUM7SUFDdkMsSUFBSUcsY0FBYztJQUNsQixJQUFJQyxhQUFhTCxPQUFPRCxNQUFNO0lBQzlCLElBQUlPLGVBQWVKLGVBQWVILE1BQU07SUFDeEMsdUNBQXVDO0lBQ3ZDLE1BQU9NLGNBQWMsRUFBRztRQUN0QixNQUFPQyxnQkFBZ0IsRUFBRztZQUN4QkYsY0FBYztnQkFDWkQ7Z0JBQ0E7Z0JBQ0E7Z0JBQ0FJLEtBQUtDLFNBQVMsQ0FBQ1IsT0FBT0MsS0FBSyxDQUFDRCxPQUFPRCxNQUFNLEdBQUdNLGFBQWEsTUFBTTtnQkFDL0Q7Z0JBQ0E7Z0JBQ0FFLEtBQUtDLFNBQVMsQ0FBQ04sZUFBZUQsS0FBSyxDQUFDQyxlQUFlSCxNQUFNLEdBQUdPLGVBQWUsTUFBTTthQUNsRixDQUFDRyxJQUFJLENBQUM7WUFDUCxJQUFJZixlQUFlVSxlQUFlWCxZQUFZO1lBQzlDYSxnQkFBZ0I7UUFDbEI7UUFDQSxJQUFJWixlQUFlVSxlQUFlWCxZQUFZO1FBQzlDWSxjQUFjO1FBQ2RDLGVBQWVKLGVBQWVILE1BQU07SUFDdEM7SUFDQSx5Q0FBeUM7SUFDekMsSUFBSUwsZUFBZVUsZ0JBQWdCWCxZQUFZO1FBQzdDVyxjQUFjRDtJQUNoQjtJQUVBLElBQUk7UUFDRixNQUFNTyxNQUFNLE1BQU0zQiw2Q0FBS0EsQ0FBQzRCLElBQUksQ0FDMUIzQixhQUNBO1lBQ0U0QixPQUFPO1lBQ1BDLFVBQVU7Z0JBQ1I7b0JBQUVDLE1BQU07b0JBQVVDLFNBQVM7Z0JBQStDO2dCQUMxRTtvQkFBRUQsTUFBTTtvQkFBUUMsU0FBU1g7Z0JBQVk7YUFDdEM7WUFDRFksYUFBYTtRQUNmLEdBQ0E7WUFDRUMsU0FBUztnQkFDUCxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU3QixZQUFZLENBQUM7Z0JBQ3hDLGdCQUFnQjtZQUNsQjtRQUNGO1FBRUYsdUNBQXVDO1FBQ3ZDLE9BQU87WUFBRThCLFNBQVNSLElBQUlTLElBQUksQ0FBQ0MsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFQyxTQUFTTixXQUFXO1FBQUc7SUFDbEUsRUFBRSxPQUFPTyxLQUFVO1FBQ2pCLDJDQUEyQztRQUMzQyxJQUFJQSxJQUFJQyxRQUFRLEVBQUU7WUFDaEIsTUFBTSxJQUFJL0IsTUFDUixDQUFDLGVBQWUsRUFBRThCLElBQUlDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDLENBQUMsRUFBRUYsSUFBSUMsUUFBUSxDQUFDRSxVQUFVLENBQUMsR0FBRyxFQUFFbEIsS0FBS0MsU0FBUyxDQUFDYyxJQUFJQyxRQUFRLENBQUNKLElBQUksRUFBRSxDQUFDO1FBRTdHO1FBQ0EsTUFBTSxJQUFJM0IsTUFBTSxtQ0FBbUM4QixJQUFJRCxPQUFPO0lBQ2hFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1qb3VybmFsLy4vc3JjL2FwaS9haS50cz84OTc0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHhBSSBHcm9rLTItMTIxMiBBUEkgdXRpbGl0eVxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY29uc3QgWEFJX0FQSV9VUkwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19YQUlfQVBJX1VSTCB8fCAnaHR0cHM6Ly9hcGkueC5haS92MS9jaGF0L2NvbXBsZXRpb25zJztcbmNvbnN0IFhBSV9BUElfS0VZID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfWEFJX0FQSV9LRVk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQUlTdW1tYXJpemVQYXlsb2FkIHtcbiAgdHJhZGVzOiBhbnlbXTtcbiAgam91cm5hbEVudHJpZXM6IGFueVtdO1xuICBwcm9tcHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQUlTdW1tYXJ5KHBheWxvYWQ6IEFJU3VtbWFyaXplUGF5bG9hZCkge1xuICBpZiAoIVhBSV9BUElfS0VZKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgeEFJIEFQSSBrZXknKTtcblxuICAvLyAtLS0gVG9rZW4gbGltaXQgZW5mb3JjZW1lbnQgLS0tXG4gIGNvbnN0IE1BWF9UT0tFTlMgPSAxMzEwNzI7XG4gIC8vIFJvdWdoIGVzdGltYXRlOiAxIHdvcmQg4omIIDEuMyB0b2tlbnNcbiAgZnVuY3Rpb24gZXN0aW1hdGVUb2tlbnModGV4dDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0ZXh0LnNwbGl0KC9cXHMrLykubGVuZ3RoICogMS4zKTtcbiAgfVxuICAvLyBUcnVuY2F0ZSB0cmFkZXMgYW5kIGpvdXJuYWxzIHRvIGZpdCB3aXRoaW4gdGhlIHRva2VuIGxpbWl0XG4gIGxldCB0cmFkZXMgPSBwYXlsb2FkLnRyYWRlcy5zbGljZSgpO1xuICBsZXQgam91cm5hbEVudHJpZXMgPSBwYXlsb2FkLmpvdXJuYWxFbnRyaWVzLnNsaWNlKCk7XG4gIGxldCBwcm9tcHQgPSBwYXlsb2FkLnByb21wdDtcbiAgLy8gVHJ5IG1vc3QgcmVjZW50IGZpcnN0XG4gIHRyYWRlcyA9IHRyYWRlcy5zbGljZSgtMTAwMCk7IC8vIGhhcmQgY2FwIGZvciBwZXJmb3JtYW5jZVxuICBqb3VybmFsRW50cmllcyA9IGpvdXJuYWxFbnRyaWVzLnNsaWNlKC0xMDAwKTtcbiAgbGV0IHVzZXJDb250ZW50ID0gJyc7XG4gIGxldCB0cmFkZUNvdW50ID0gdHJhZGVzLmxlbmd0aDtcbiAgbGV0IGpvdXJuYWxDb3VudCA9IGpvdXJuYWxFbnRyaWVzLmxlbmd0aDtcbiAgLy8gSXRlcmF0aXZlbHkgcmVkdWNlIHVudGlsIHVuZGVyIGxpbWl0XG4gIHdoaWxlICh0cmFkZUNvdW50ID49IDApIHtcbiAgICB3aGlsZSAoam91cm5hbENvdW50ID49IDApIHtcbiAgICAgIHVzZXJDb250ZW50ID0gW1xuICAgICAgICBwcm9tcHQsXG4gICAgICAgICcnLFxuICAgICAgICAnVHJhZGVzOicsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHRyYWRlcy5zbGljZSh0cmFkZXMubGVuZ3RoIC0gdHJhZGVDb3VudCksIG51bGwsIDIpLFxuICAgICAgICAnJyxcbiAgICAgICAgJ0pvdXJuYWwgRW50cmllczonLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShqb3VybmFsRW50cmllcy5zbGljZShqb3VybmFsRW50cmllcy5sZW5ndGggLSBqb3VybmFsQ291bnQpLCBudWxsLCAyKVxuICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgIGlmIChlc3RpbWF0ZVRva2Vucyh1c2VyQ29udGVudCkgPCBNQVhfVE9LRU5TKSBicmVhaztcbiAgICAgIGpvdXJuYWxDb3VudCAtPSAxMDtcbiAgICB9XG4gICAgaWYgKGVzdGltYXRlVG9rZW5zKHVzZXJDb250ZW50KSA8IE1BWF9UT0tFTlMpIGJyZWFrO1xuICAgIHRyYWRlQ291bnQgLT0gMTA7XG4gICAgam91cm5hbENvdW50ID0gam91cm5hbEVudHJpZXMubGVuZ3RoO1xuICB9XG4gIC8vIElmIHN0aWxsIG92ZXIsIGZhbGxiYWNrIHRvIGp1c3QgcHJvbXB0XG4gIGlmIChlc3RpbWF0ZVRva2Vucyh1c2VyQ29udGVudCkgPj0gTUFYX1RPS0VOUykge1xuICAgIHVzZXJDb250ZW50ID0gcHJvbXB0O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KFxuICAgICAgWEFJX0FQSV9VUkwsXG4gICAgICB7XG4gICAgICAgIG1vZGVsOiAnZ3Jvay0yLTEyMTInLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6ICdZb3UgYXJlIGFuIGV4cGVydCB0cmFkaW5nIGNvYWNoIGFuZCBhbmFseXN0LicgfSxcbiAgICAgICAgICB7IHJvbGU6ICd1c2VyJywgY29udGVudDogdXNlckNvbnRlbnQgfVxuICAgICAgICBdLFxuICAgICAgICB0ZW1wZXJhdHVyZTogMC4yXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7WEFJX0FQSV9LRVl9YCxcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG4gICAgLy8gT3BlbkFJLWNvbXBhdGlibGUgcmVzcG9uc2Ugc3RydWN0dXJlXG4gICAgcmV0dXJuIHsgc3VtbWFyeTogcmVzLmRhdGEuY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50IHx8ICcnIH07XG4gIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgLy8gQWRkIGRldGFpbGVkIGVycm9yIGxvZ2dpbmcgZm9yIGRlYnVnZ2luZ1xuICAgIGlmIChlcnIucmVzcG9uc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYHhBSSBBUEkgZXJyb3I6ICR7ZXJyLnJlc3BvbnNlLnN0YXR1c30gJHtlcnIucmVzcG9uc2Uuc3RhdHVzVGV4dH0gLSAke0pTT04uc3RyaW5naWZ5KGVyci5yZXNwb25zZS5kYXRhKX1gXG4gICAgICApO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjb25uZWN0IHRvIHhBSSBBUEk6ICcgKyBlcnIubWVzc2FnZSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJheGlvcyIsIlhBSV9BUElfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1hBSV9BUElfVVJMIiwiWEFJX0FQSV9LRVkiLCJORVhUX1BVQkxJQ19YQUlfQVBJX0tFWSIsImZldGNoQUlTdW1tYXJ5IiwicGF5bG9hZCIsIkVycm9yIiwiTUFYX1RPS0VOUyIsImVzdGltYXRlVG9rZW5zIiwidGV4dCIsIk1hdGgiLCJjZWlsIiwic3BsaXQiLCJsZW5ndGgiLCJ0cmFkZXMiLCJzbGljZSIsImpvdXJuYWxFbnRyaWVzIiwicHJvbXB0IiwidXNlckNvbnRlbnQiLCJ0cmFkZUNvdW50Iiwiam91cm5hbENvdW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImpvaW4iLCJyZXMiLCJwb3N0IiwibW9kZWwiLCJtZXNzYWdlcyIsInJvbGUiLCJjb250ZW50IiwidGVtcGVyYXR1cmUiLCJoZWFkZXJzIiwic3VtbWFyeSIsImRhdGEiLCJjaG9pY2VzIiwibWVzc2FnZSIsImVyciIsInJlc3BvbnNlIiwic3RhdHVzIiwic3RhdHVzVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./src/api/ai.ts\n");

/***/ })

};
;